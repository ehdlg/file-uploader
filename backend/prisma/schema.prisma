generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model File {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(255)
  mimetype   String    @db.VarChar(100)
  size       BigInt
  created_at DateTime? @default(now()) @db.Timestamp(6)
  user_id    String?   @db.Uuid
  folder_id  String?   @db.Uuid
  folders    Folder?   @relation(fields: [folder_id], references: [id], onDelete: Cascade)
  users      User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([name, folder_id])
  @@map("files")
}

model Folder {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @db.VarChar(255)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  parent_id     String?   @db.Uuid
  user_id       String?   @db.Uuid
  files         File[]
  folders       Folder?   @relation("foldersTofolders", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  other_folders Folder[]  @relation("foldersTofolders")
  users         User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([name, parent_id])
  @@map("folders")
}

model User {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username   String    @unique @db.VarChar(255)
  email      String    @unique @db.VarChar(255)
  password   String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  files      File[]
  folders    Folder[]

  @@map("users")
}
